// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220527125709_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = "12616652-481e-4d57-8fd5-5876f83276b8",
                            City = "Kraków",
                            FirstName = "Stanisław",
                            LastName = "Jabłoński",
                            PhoneNumber = 786828418,
                            PostalCode = 30614,
                            Street = "ul. Błogosławionej Siedliskiej Franciszki 62"
                        },
                        new
                        {
                            Id = "e16319cc-56f6-4f0b-af07-10afb3922d07",
                            City = "Warszawa",
                            FirstName = "Karina",
                            LastName = "Nowicka",
                            PhoneNumber = 793247715,
                            PostalCode = 2198,
                            Street = "ul. Kinetyczna 85"
                        },
                        new
                        {
                            Id = "29826165-6d7a-43dd-9c94-be29156f7e54",
                            City = "Kraków",
                            FirstName = "Klaudia",
                            LastName = "Rutkowska",
                            PhoneNumber = 722623711,
                            PostalCode = 30419,
                            Street = "ul. Deotymy 12"
                        },
                        new
                        {
                            Id = "40f3ba77-6a4f-45c6-937d-7c4e3dc8ccad",
                            City = "Wrocław",
                            FirstName = "Iwo",
                            LastName = "Adamczyk",
                            PhoneNumber = 888569892,
                            PostalCode = 50111,
                            Street = "ul. Malarska 107"
                        },
                        new
                        {
                            Id = "b4c982b1-aa18-463f-803c-89eb882c80a0",
                            City = "Warszawa",
                            FirstName = "Joasia",
                            LastName = "Kowalczyk",
                            PhoneNumber = 723999750,
                            PostalCode = 1715,
                            Street = "ul. Kłodawska 87"
                        });
                });

            modelBuilder.Entity("WebApp.Models.DeviceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransportCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");

                    b.HasData(
                        new
                        {
                            Id = "731657e5-0806-4f38-a3d0-c0c3b3b34644",
                            DeviceName = "Lodówka",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "14d7daee-9856-4534-853b-32c367d514dd",
                            DeviceName = "Indukcja",
                            TransportCost = 40.0
                        },
                        new
                        {
                            Id = "804fa70d-4e6f-4903-b14e-21d0e5ca82ac",
                            DeviceName = "Mikrofalówka",
                            TransportCost = 30.0
                        },
                        new
                        {
                            Id = "58541f43-c67b-4952-9f65-41f3caeb52b8",
                            DeviceName = "Inne",
                            TransportCost = 0.0
                        },
                        new
                        {
                            Id = "820c4263-0136-480f-aebc-0a13b75a36cb",
                            DeviceName = "Piekarnik",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "fdb3230f-8ce7-4eff-92a7-d9968700df84",
                            DeviceName = "Telewizor",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "5319572b-c0f1-4c28-91ec-75cff4593f10",
                            DeviceName = "Pralka",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "ecb3de67-7c5c-414e-91d0-da2cec9530d7",
                            DeviceName = "Zmywarka",
                            TransportCost = 50.0
                        });
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            Id = "d623a510-4029-46e9-807f-3b3a40cb3bcb",
                            MarkName = "Samsung"
                        },
                        new
                        {
                            Id = "ec5d4855-1dc8-4f65-8dd0-10ed0d0d7692",
                            MarkName = "Amica"
                        },
                        new
                        {
                            Id = "b5ce664d-14f2-4742-bab4-d2edd4165cf1",
                            MarkName = "Philips"
                        },
                        new
                        {
                            Id = "7ce767d9-b4e8-42ca-b851-c7a0ebb103cf",
                            MarkName = "Sony"
                        },
                        new
                        {
                            Id = "ebab334c-a64f-4fd4-865f-4fd2b3dae046",
                            MarkName = "Huawei"
                        },
                        new
                        {
                            Id = "853cdad7-4a46-427e-ab4b-a3a3d133f3f8",
                            MarkName = "Siemens"
                        },
                        new
                        {
                            Id = "e74296bf-2065-4a88-86d5-1c41ffe8d2d5",
                            MarkName = "Bosh"
                        },
                        new
                        {
                            Id = "8814c06b-fd6e-4dd2-95e1-e27aeae7cb20",
                            MarkName = "Whirlpool"
                        },
                        new
                        {
                            Id = "10bd75e2-5e3f-4150-95bc-dcf4374f3071",
                            MarkName = "AEG"
                        },
                        new
                        {
                            Id = "03aa9ebb-dfcd-42ed-aa12-da90ca278c4f",
                            MarkName = "Logitech"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairCostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("MarkId");

                    b.HasIndex("RepairCostId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("WebApp.Models.RepairCost", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("FaultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RepairCost");
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepairStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = "1d4fd154-c870-4bcc-abce-30ca4cc811db",
                            RepairStatus = "Naprawa została zgłoszona"
                        },
                        new
                        {
                            Id = "7036ae37-08b2-4a22-bc1c-1a400517b88e",
                            RepairStatus = "Wysłano kuriera"
                        },
                        new
                        {
                            Id = "a28b35c5-7aeb-47cc-ba92-7077b4ddd231",
                            RepairStatus = "Wycena"
                        },
                        new
                        {
                            Id = "961036d4-c331-4ea2-bfc0-c582d3308bc8",
                            RepairStatus = "Oczekiwanie na akceptacje"
                        },
                        new
                        {
                            Id = "33e0019b-2259-4717-9fad-f3f6eaf42e47",
                            RepairStatus = "Cena naprawy odrzucona"
                        },
                        new
                        {
                            Id = "ed4c966f-586a-48b0-b161-ed4a6c949b2a",
                            RepairStatus = "Cena naprawy zaakceptowana"
                        },
                        new
                        {
                            Id = "77675cb6-0ed9-4b08-8e46-1c7e1e80d006",
                            RepairStatus = "Naprawa zakończona"
                        },
                        new
                        {
                            Id = "4b4842d2-caba-48a8-bb74-0297e140a22a",
                            RepairStatus = "Wysłano sprzęt do klienta"
                        },
                        new
                        {
                            Id = "2d3ac697-c86c-44cc-8f27-476f2abe8059",
                            RepairStatus = "Zakończono"
                        },
                        new
                        {
                            Id = "edd56a0f-f539-4ffb-8e08-0d72fb068016",
                            RepairStatus = "Anulowano"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.HasOne("WebApp.Models.Address", "Address")
                        .WithMany("Repairs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Mark", "Mark")
                        .WithMany("Repairs")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.RepairCost", "RepairCost")
                        .WithMany()
                        .HasForeignKey("RepairCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Status", "Status")
                        .WithMany("Repairs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeviceType");

                    b.Navigation("IdentityUser");

                    b.Navigation("Mark");

                    b.Navigation("RepairCost");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
