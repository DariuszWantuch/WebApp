// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220527154520_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = "faa41e7a-720a-4f52-9ae4-7c251e0ea748",
                            City = "Kraków",
                            FirstName = "Stanisław",
                            LastName = "Jabłoński",
                            PhoneNumber = 786828418,
                            PostalCode = 30614,
                            Street = "ul. Błogosławionej Siedliskiej Franciszki 62"
                        },
                        new
                        {
                            Id = "ca9db23b-0858-4f29-b046-ccfd54b91a3c",
                            City = "Warszawa",
                            FirstName = "Karina",
                            LastName = "Nowicka",
                            PhoneNumber = 793247715,
                            PostalCode = 2198,
                            Street = "ul. Kinetyczna 85"
                        },
                        new
                        {
                            Id = "3fe0d24b-9adf-4efd-aefa-24656b535661",
                            City = "Kraków",
                            FirstName = "Klaudia",
                            LastName = "Rutkowska",
                            PhoneNumber = 722623711,
                            PostalCode = 30419,
                            Street = "ul. Deotymy 12"
                        },
                        new
                        {
                            Id = "2fa2e43d-8448-40aa-845a-921f58c320aa",
                            City = "Wrocław",
                            FirstName = "Iwo",
                            LastName = "Adamczyk",
                            PhoneNumber = 888569892,
                            PostalCode = 50111,
                            Street = "ul. Malarska 107"
                        },
                        new
                        {
                            Id = "9b600e0d-79a4-4c8e-b703-adb4f2eae582",
                            City = "Warszawa",
                            FirstName = "Joasia",
                            LastName = "Kowalczyk",
                            PhoneNumber = 723999750,
                            PostalCode = 1715,
                            Street = "ul. Kłodawska 87"
                        });
                });

            modelBuilder.Entity("WebApp.Models.DeviceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransportCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");

                    b.HasData(
                        new
                        {
                            Id = "6f94fd18-53e1-4b9a-bfe8-7f7720f5fff3",
                            DeviceName = "Lodówka",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "daaa9340-1b44-458a-8b78-8af38610b908",
                            DeviceName = "Indukcja",
                            TransportCost = 40.0
                        },
                        new
                        {
                            Id = "4d45c3f5-a42c-4503-bbaf-375686151281",
                            DeviceName = "Mikrofalówka",
                            TransportCost = 30.0
                        },
                        new
                        {
                            Id = "59a1932f-da5b-44f9-b086-dbc14547b60e",
                            DeviceName = "Inne",
                            TransportCost = 0.0
                        },
                        new
                        {
                            Id = "fde788d8-f8c2-4024-924d-39ac567f071d",
                            DeviceName = "Piekarnik",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "c8265deb-2971-489f-991b-471c81c469a0",
                            DeviceName = "Telewizor",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "6f3f6198-035d-4ce7-894b-6119615d880f",
                            DeviceName = "Pralka",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "2be8e865-0d6d-40fa-8afc-504b4966dc88",
                            DeviceName = "Zmywarka",
                            TransportCost = 50.0
                        });
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            Id = "c3683285-faba-433d-8141-cdd4a5c75c92",
                            MarkName = "Samsung"
                        },
                        new
                        {
                            Id = "e5fbac53-b215-47b9-9e57-e742e401bb52",
                            MarkName = "Amica"
                        },
                        new
                        {
                            Id = "81f55e52-579b-46fe-9696-2c8a44bff5c1",
                            MarkName = "Philips"
                        },
                        new
                        {
                            Id = "b7dcc828-7047-4233-8ae4-ce33d21622e2",
                            MarkName = "Sony"
                        },
                        new
                        {
                            Id = "482559ea-9ece-41b3-94be-1b61bc5272c6",
                            MarkName = "Huawei"
                        },
                        new
                        {
                            Id = "8847de53-644d-4b9b-b39b-47711078387d",
                            MarkName = "Siemens"
                        },
                        new
                        {
                            Id = "fc3a3c95-553d-4ed4-b480-b0b1a6032427",
                            MarkName = "Bosh"
                        },
                        new
                        {
                            Id = "a01bd981-d7c3-46a4-a1b1-56c3d3da0cb5",
                            MarkName = "Whirlpool"
                        },
                        new
                        {
                            Id = "e64dd8ba-db31-4df1-b9d5-5edf0d19d763",
                            MarkName = "AEG"
                        },
                        new
                        {
                            Id = "f91d65af-b4aa-4c88-8a20-b86d56a83da8",
                            MarkName = "Logitech"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairCostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("MarkId");

                    b.HasIndex("RepairCostId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("WebApp.Models.RepairCost", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("FaultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RepairCost");

                    b.HasData(
                        new
                        {
                            Id = "7577c984-755b-484a-b77c-f9d613611eae",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzony silnik.",
                            IsAccepted = true,
                            IsRejected = false
                        },
                        new
                        {
                            Id = "0a4e4844-85da-4958-8f14-c83cd8545214",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzone drzwi.",
                            IsAccepted = true,
                            IsRejected = false
                        },
                        new
                        {
                            Id = "742f35b0-300c-4db6-a4ed-fd75b56119e9",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzony kabel.",
                            IsAccepted = true,
                            IsRejected = false
                        });
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepairStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = "29c97c05-a835-4078-a41a-279e310208be",
                            RepairStatus = "Naprawa została zgłoszona"
                        },
                        new
                        {
                            Id = "6276f77c-6e77-498c-848d-ae86cbf86234",
                            RepairStatus = "Wysłano kuriera"
                        },
                        new
                        {
                            Id = "52998451-f220-4291-b7d3-56cc120a38d6",
                            RepairStatus = "Wycena"
                        },
                        new
                        {
                            Id = "316f65c6-f9eb-4000-bb91-e57b5cec1606",
                            RepairStatus = "Oczekiwanie na akceptacje"
                        },
                        new
                        {
                            Id = "391f61e2-8dee-40a2-a6cb-f23a9c4ebd76",
                            RepairStatus = "Cena naprawy odrzucona"
                        },
                        new
                        {
                            Id = "a0693762-5259-416a-a691-5c299f36c220",
                            RepairStatus = "Cena naprawy zaakceptowana"
                        },
                        new
                        {
                            Id = "f499f196-bd15-4065-9a26-5e6350fcd864",
                            RepairStatus = "Naprawa zakończona"
                        },
                        new
                        {
                            Id = "485947f6-8717-4df7-8f92-8c050c6ececb",
                            RepairStatus = "Wysłano sprzęt do klienta"
                        },
                        new
                        {
                            Id = "85b11103-5e99-4a6e-93c3-724bad3d2b1f",
                            RepairStatus = "Zakończono"
                        },
                        new
                        {
                            Id = "fa9dd91c-18d8-4a17-9ccc-0cd995aaba5a",
                            RepairStatus = "Anulowano"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.HasOne("WebApp.Models.Address", "Address")
                        .WithMany("Repairs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Mark", "Mark")
                        .WithMany("Repairs")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.RepairCost", "RepairCost")
                        .WithMany()
                        .HasForeignKey("RepairCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Status", "Status")
                        .WithMany("Repairs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeviceType");

                    b.Navigation("IdentityUser");

                    b.Navigation("Mark");

                    b.Navigation("RepairCost");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
