// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data.EntityFramework;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220528104921_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = "23c39e5a-e895-403f-93a7-35b158406a90",
                            City = "Kraków",
                            FirstName = "Stanisław",
                            LastName = "Jabłoński",
                            PhoneNumber = 786828418,
                            PostalCode = 30614,
                            Street = "ul. Błogosławionej Siedliskiej Franciszki 62"
                        },
                        new
                        {
                            Id = "279a5460-e35b-4fd7-8638-3622cd4a3cd2",
                            City = "Warszawa",
                            FirstName = "Karina",
                            LastName = "Nowicka",
                            PhoneNumber = 793247715,
                            PostalCode = 2198,
                            Street = "ul. Kinetyczna 85"
                        },
                        new
                        {
                            Id = "eef356f9-faf4-44ad-8c7f-d45929612e94",
                            City = "Kraków",
                            FirstName = "Klaudia",
                            LastName = "Rutkowska",
                            PhoneNumber = 722623711,
                            PostalCode = 30419,
                            Street = "ul. Deotymy 12"
                        },
                        new
                        {
                            Id = "f8612490-adb6-4574-8d6f-7a16ca2d2167",
                            City = "Wrocław",
                            FirstName = "Iwo",
                            LastName = "Adamczyk",
                            PhoneNumber = 888569892,
                            PostalCode = 50111,
                            Street = "ul. Malarska 107"
                        },
                        new
                        {
                            Id = "2a94b702-1a9a-4213-b717-c3123a3b418d",
                            City = "Warszawa",
                            FirstName = "Joasia",
                            LastName = "Kowalczyk",
                            PhoneNumber = 723999750,
                            PostalCode = 1715,
                            Street = "ul. Kłodawska 87"
                        });
                });

            modelBuilder.Entity("WebApp.Models.DeviceType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransportCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DeviceType");

                    b.HasData(
                        new
                        {
                            Id = "e9a93ab9-e2e0-4fcb-8bd6-e75a037c3064",
                            DeviceName = "Lodówka",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "53fae8a6-9c12-4d4b-8cde-d61035913035",
                            DeviceName = "Indukcja",
                            TransportCost = 40.0
                        },
                        new
                        {
                            Id = "785d270c-0d57-4787-90e3-f23da5e9ed35",
                            DeviceName = "Mikrofalówka",
                            TransportCost = 30.0
                        },
                        new
                        {
                            Id = "29e93e52-abf3-48f0-a00f-bb9df2896ef1",
                            DeviceName = "Inne",
                            TransportCost = 0.0
                        },
                        new
                        {
                            Id = "9828b4b7-1bfb-450f-a681-86ac9f48c0b3",
                            DeviceName = "Piekarnik",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "d152a77b-108e-4ca6-825b-a944bec3b3d5",
                            DeviceName = "Telewizor",
                            TransportCost = 100.0
                        },
                        new
                        {
                            Id = "7d0830a0-eaad-48af-9089-50cc421f8bcb",
                            DeviceName = "Pralka",
                            TransportCost = 50.0
                        },
                        new
                        {
                            Id = "2d843e17-d463-4155-94ac-7f9c14a1596c",
                            DeviceName = "Zmywarka",
                            TransportCost = 50.0
                        });
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            Id = "16408fe4-7bc7-4bb0-87b5-87f1c1fcadca",
                            MarkName = "Samsung"
                        },
                        new
                        {
                            Id = "d96adae8-2cbb-4e86-aeb0-4ae81753b221",
                            MarkName = "Amica"
                        },
                        new
                        {
                            Id = "88c4a037-d5b0-4ae6-bb06-5e9f7bcd9b2a",
                            MarkName = "Philips"
                        },
                        new
                        {
                            Id = "a14e4c37-8731-42d9-845f-d7a953293277",
                            MarkName = "Sony"
                        },
                        new
                        {
                            Id = "045a1297-5b86-45df-ac41-4b29246026a0",
                            MarkName = "Huawei"
                        },
                        new
                        {
                            Id = "f5775945-cd35-4806-a8ab-66654765eb54",
                            MarkName = "Siemens"
                        },
                        new
                        {
                            Id = "e4a48371-d3e6-46c6-b12f-11b478832e2c",
                            MarkName = "Bosh"
                        },
                        new
                        {
                            Id = "a75fc129-21c7-4744-95c1-2f4664644d0e",
                            MarkName = "Whirlpool"
                        },
                        new
                        {
                            Id = "a2b855fa-d60d-4d74-869a-a3e588a79c1e",
                            MarkName = "AEG"
                        },
                        new
                        {
                            Id = "01bb89d3-1433-4b64-8f8e-dd92fe339775",
                            MarkName = "Logitech"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MarkId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairCostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("MarkId");

                    b.HasIndex("RepairCostId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("WebApp.Models.RepairCost", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("FaultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RepairCost");

                    b.HasData(
                        new
                        {
                            Id = "92862e92-14c9-475e-b409-5e5dd8c3eec4",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzony silnik.",
                            IsAccepted = true,
                            IsRejected = false
                        },
                        new
                        {
                            Id = "1b972b4b-b3b7-451d-bc6a-f8c9afc04846",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzone drzwi.",
                            IsAccepted = true,
                            IsRejected = false
                        },
                        new
                        {
                            Id = "d8a23637-e6a9-4289-a15d-eaf289e92be9",
                            Cost = 67.599999999999994,
                            FaultDescription = "Uszkodzony kabel.",
                            IsAccepted = true,
                            IsRejected = false
                        });
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepairStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = "f8bcfcd1-f9a5-4f28-96a0-a73c906c7159",
                            RepairStatus = "Naprawa została zgłoszona"
                        },
                        new
                        {
                            Id = "2e3945fc-4224-4823-846c-0bd9b21c4a42",
                            RepairStatus = "Wysłano kuriera"
                        },
                        new
                        {
                            Id = "f6d17df2-4c05-4985-8779-6a71ec06a314",
                            RepairStatus = "Wycena"
                        },
                        new
                        {
                            Id = "cf59fb12-f701-4f6f-8e71-cf596182aa1c",
                            RepairStatus = "Oczekiwanie na akceptacje"
                        },
                        new
                        {
                            Id = "5b04558d-9220-4157-a4bd-6a043151c497",
                            RepairStatus = "Cena naprawy odrzucona"
                        },
                        new
                        {
                            Id = "fbf91ffa-1090-4a99-8763-face6e977006",
                            RepairStatus = "Cena naprawy zaakceptowana"
                        },
                        new
                        {
                            Id = "c7cce1d7-7fde-4c2b-a917-69e077833e89",
                            RepairStatus = "Naprawa zakończona"
                        },
                        new
                        {
                            Id = "52008a41-7ad2-4829-aebc-d774d6930067",
                            RepairStatus = "Wysłano sprzęt do klienta"
                        },
                        new
                        {
                            Id = "d85e2d83-c471-4083-8974-48fd08e68611",
                            RepairStatus = "Zakończono"
                        },
                        new
                        {
                            Id = "0368748a-9909-439f-a7f6-2a99305384fe",
                            RepairStatus = "Anulowano"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Repair", b =>
                {
                    b.HasOne("WebApp.Models.Address", "Address")
                        .WithMany("Repairs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Mark", "Mark")
                        .WithMany("Repairs")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.RepairCost", "RepairCost")
                        .WithMany()
                        .HasForeignKey("RepairCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Status", "Status")
                        .WithMany("Repairs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeviceType");

                    b.Navigation("IdentityUser");

                    b.Navigation("Mark");

                    b.Navigation("RepairCost");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Models.Address", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Mark", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("WebApp.Models.Status", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
